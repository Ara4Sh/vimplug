#!/bin/bash

# Simple script to manage vim plugins

# Constants

# Globals
BUNDLE_PATH="$HOME/.vim/bundle"
exit_code=

# Downlaod and install plugins in $@.
# Options the command takes:
#    -r    read vimrc path from VIMPLUG_VIMRC enironment variable
#          or look for it in its standard locations
#
# Arguments:
#    List of white-space separated URLs
# Returns:
#    None
install() {
	local vimrc
	local urls="$@"

	local opt_read=false
	while getopts ":r" opt; do
		case $opt in
		r)
			opt_read=true
			;;
		esac
	done

	if [[ $opt_read = true ]]; then
		if [[ -n "$VIMPLUG_VIMRC" ]]; then
			vimrc="$VIMPLUG_VIMRC"
		else
			if stat "$HOME/.vimrc" &> /dev/null; then
				vimrc="$HOME/.vimrc"
			elif stat "$HOME/.vim/vimrc" &> /dev/null; then
				vimrc="$HOME/.vim/vimrc"
			fi
		fi
		urls=
		while read -r line; do
			if [[ $line =~ ^\"\| ]]; then
				urls+="$(cut -d ' ' -f 3 <<< $line) "
			fi
		done < "$vimrc"
	fi

	for url in $urls; do
		git clone "$url"
	done
}

# Remove plugins in $@.
#
# Arguments:
#    List of white-space separated plugins
# Returns:
#    None
remove() {
	# Just make sure that we are in the right directory
	cd $BUNDLE_PATH
	for file in "$@"; do
		stat "$file" &> /dev/null
		if [[ $? -gt 0 ]]; then
			err "no such a plugin: '$file'"
		else
			rm -rf "$file"
		fi
	done
}

# List plugins in $BUNDLE_PATH
# Options the command takes:
#    -s (sort by last commit)
#    -u (include plugin's URL)
#
# Arguments:
#    None
# Returns:
#    None
list() {
	local plugin_name
	local last_commit
	local last_pull
	local output
	local url

	local opt_url=false
	local opt_sort=false
	while getopts ":su" opt; do
		case $opt in
		s)
			opt_sort=true
			;;
		u)
			opt_url=true
			;;
		esac
	done

	for file in *; do
		if [[ -d $file ]] && is_git_repo $file; then
			cd $file
			plugin_name=$file
			last_commit=$(git show --date=iso | grep "Date" |
				sed -r 's/^Date:   //' | cut -d ' ' -f 1,2)
			last_pull=$(stat --printf=%y .git/FETCH_HEAD 2> /dev/null |
				cut -d . -f 1)
			if [[ -z $last_pull ]]; then
				last_pull="?"
			fi
			url=$(git remote get-url origin)

			if [[ $opt_url = true ]]; then
				output+="$(printf "%-22s%-22s" "$plugin_name" "$url")\n"
			else
				output+="$(printf "%-22s%-22s%-22s" "$plugin_name" \
					"$last_commit" "$last_pull")\n"
			fi
			cd ..
		fi
	done

	if [[ $opt_sort = true ]]; then
		output="$(echo -ne "$output" | sort --key 2,3)\n"
	fi

	if [[ $opt_url = true ]]; then
		printf "%-22s%-22s\n\n" "Plugin Name" "URL"
	else
		printf "%-22s%-22s%-22s\n\n" "Plugin Name" "Last Commit" "Last Pull"
	fi
	echo -e "$output"
}

# Update plugins in $@. If $@ is empty, update all.
#
# Arguments:
#    List of white-space separated plugins [OPTIONAL]
# Returns:
#    None
update() {
	local files
	local has_args=false

	if [[ -z "$@" ]]; then
		files=$(ls)
	else
		has_args=true
		files=$@
	fi

	for file in $files; do
		if [[ -d $file ]] && is_git_repo $file; then
			cd $file
			git pull origin master
			cd ..
		elif [[ $has_args = true ]]; then
			err "no such a plugin: '$file'"
		fi
	done
}

print_help() {
	if [[ -z $1 ]] || [[ $1 = help ]]; then
		cat <<- "EOF"
		This is the help for help.
		EOF
		return 0
	fi

	case $1 in
	install)
		cat <<- "EOF"
		This is the help for install.
		EOF
		;;
	list)
		cat <<- "EOF"
		This is the help for list
		EOF
		;;
	remove)
		cat <<- "EOF"
		This is the help for remove.
		EOF
		;;
	update)
		cat <<- "EOF"
		This is the help for update.
		EOF
		;;
	*)
		err "unknown command: '$1'"
		exit 1
		;;
	esac
}

usage() {
	cat <<- "EOF"
	Usage: vimplug COMMAND [OPTION]...
	Manage VIM plugins.

	COMMANDs:
	    install         install plugins
	    list            list installed plugins
	    remove          remove plugins
	    update          update plugins
	    help            dispaly help for commands
	EOF
}

# Check if $1 has optional argument. If true, then pass an empty
# argument to the corresponding routine.
#
# Arguments:
#     A command-line option
# Returns:
#     None
handle_optional_arg() {
	case $1 in
	u) update ""
		;;
	*) err "option '-$1' requires an argument"
	   exit 1
		;;
	esac
}

# Check if $1 is a Git repository.
#
# Arguments:
#     A directory
# Returns:
#     Exit code of `git status`
is_git_repo() {
	cd $1
	git status &> /dev/null
	exit_code=$?
	cd ..
	return $exit_code
}

# Error reporting routine. Write to STDERR.
#
# Arguments:
#     A message
# Returns:
#     None
err() {
	echo "$1" 1>&2
}

main() {
	if [[ $# -eq 0 ]]; then
		err "missing command"
		exit 1
	fi

	if ! cd $BUNDLE_PATH 2> /dev/null; then
		err "$BUNDLE_PATH does not exist"
		exit 1
	fi

	case $1 in
	install)
		shift
		install "$@"
		;;
	list)
		shift
		list "$@"
		;;
	remove)
		shift
		remove "$@"
		;;
	update)
		shift
		update "$@"
		;;
	help)
		shift
		print_help "$@"
		exit 0
		;;
	*)
		err "unknown command: '$1'"; echo
		usage
		exit 1
		;;
	esac

	# If we get here, all went smoothly
	exit 0
}

main "$@"
